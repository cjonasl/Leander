window.sudoku = {};

window.sudoku.boards = [[], [], [], [], [], [], [], [], [], []];

window.sudoku.boards[0].push('900000000603250807040709020201090070005040000090628100400902713182306900000410082');
window.sudoku.boards[0].push('900000500013254890548060000061000008000047000094020035450900003000376950309400682');
window.sudoku.boards[0].push('927030546600000890540009021061000000000040260000608135406002713000006904379000600');
window.sudoku.boards[0].push('920800000000054807000069021061093000830147060004600100050080013082000004379410082');
window.sudoku.boards[0].push('900000546603200090548000000001093470800047260094008035006980000180076054009400002');
window.sudoku.boards[0].push('000831540013054090000060000000500078035007200794008130050902013180000900009405682');
window.sudoku.boards[0].push('927031006000254097508709000060593070030047060000608105400000013002076954009000000');
window.sudoku.boards[0].push('020030000003254097508769300200593408830000000000008100056982003082000004379400002');
window.sudoku.boards[0].push('000000506013054897548069000000000008005107260004628035400000000002376004079015082');
window.sudoku.boards[0].push('000001000000250890000769320000000000005147260790008100456080010180376954079415000');
window.sudoku.boards[0].push('426000570000300000805472060004609357600045081010200096702800010001507000050104030');
window.sudoku.boards[0].push('420900003000050800835472060084610000090040281000000000000000615361527908050164700');
window.sudoku.boards[0].push('006081003009000820000072100000009350093005080000238096742890000061020908058064730');
window.sudoku.boards[0].push('026980070009356820835070109204619350600000000507030000000893010000527940900000000');
window.sudoku.boards[0].push('426981573000000800800070169280010350000005201010200096700890015000000008008164002');
window.sudoku.boards[0].push('006001573179356824000470000000000000000745000510000096742093010361500000058100032');
window.sudoku.boards[0].push('026080500109000004830470160084610007600000080500030490040000610001027908950064730');
window.sudoku.boards[0].push('406081500170006024835400000000600000090040000010208490042090615300520948950000032');
window.sudoku.boards[0].push('400081070179300020830470060200610350000000000517000096740093610061500000000164730');
window.sudoku.boards[0].push('000000070000356804805470069200600000693745001017208496702093600000007948000000002');
window.sudoku.boards[0].push('489050000015002900237480501520013870008590010901020000100000005000300040006201793');
window.sudoku.boards[0].push('089150000615702000007009061024000800300097402971000000100000025790005008056201793');
window.sudoku.boards[0].push('489156230615702004237409500000003800000000000971000056040000000000005148856241000');
window.sudoku.boards[0].push('000000030005732904237000500000613800300000012900024350000978620792065000056200703');
window.sudoku.boards[0].push('480006007610702900000489001500003000060000400000004050003978625092365008856200790');
window.sudoku.boards[0].push('480156207600032900007009000000010070308000012900020056100978025702365008850200000');
window.sudoku.boards[0].push('000150007015000004030400560524603000000007410071000356140900000792365100850000793');
window.sudoku.boards[0].push('400056030600002900000000061500000000068097402070024006043078025792065140856200700');
window.sudoku.boards[0].push('009050237000032004200480000520613009000500400001824356003970020090065000800001793');
window.sudoku.boards[0].push('400000000005702980007000500000613879300597412970000000003978020700005148800201790');
window.sudoku.boards[0].push('200007000000890002018503697076341258001900736500080100100008060000039400709405000');
window.sudoku.boards[0].push('000000084367890512408003697076040000041900730500700009150000900000030070700465021');
window.sudoku.boards[0].push('290017000067094502418003097076000008041950030000000040104000963082100400039065000');
window.sudoku.boards[0].push('205610004307800012400523007076041200001900706500000000000270063600109405739400000');
window.sudoku.boards[0].push('295017304000094502010520600006340000001050006500700140054078000080000075730400821');
window.sudoku.boards[0].push('000607004367894500400000000076000050040952036023086109100008060680139000709060020');
window.sudoku.boards[0].push('290617300367804000000000600000000008840952736500700009050200000002039470730065821');
window.sudoku.boards[0].push('095610080060094512010520607070000058000000030000086149104000003082039470709400800');
window.sudoku.boards[0].push('295600000060000002418503007970001200000002036523786000004278060682009005000465000');
window.sudoku.boards[0].push('295617300360004000008503607900000200001900006500700049154000003682100470739000001');
window.sudoku.boards[0].push('000000400041903000025140963030002010007000690652710800000005340308471206504020080');
window.sudoku.boards[0].push('960058471000000008805000060430680710180500002652000030216890000000071250570006100');
window.sudoku.boards[0].push('000250470740003000025140900009682715180500000002010000206800000390001250500326089');
window.sudoku.boards[0].push('960000001740963520000007963400002705087534600050000830210800040008470000000006189');
window.sudoku.boards[0].push('003000070001963528025107903000082700000000692650000000206890000000001256004326189');
window.sudoku.boards[0].push('000258400000900508025140960000000005180504002650009830016095347090470000074300100');
window.sudoku.boards[0].push('960050470740963500805047903009600705000034092602019800006800000090000250074300000');
window.sudoku.boards[0].push('960008471741000520000007900000082700007504002652019834206000007398000200000000189');
window.sudoku.boards[0].push('960050000001060028005047903439680000180500690002709030016095307000000006574020009');
window.sudoku.boards[0].push('063000070741960500005007000400680000087530090000019800016890340300000056570306189');
window.sudoku.boards[1].push('900000000603250807040709020201090070005040000090628100400002713182306900000410002');
window.sudoku.boards[1].push('900000500013254890548060000001000008000047000094020035450900003000376950309000682');
window.sudoku.boards[1].push('927030540600000890540009021061000000000040260000608135406002713000006904309000600');
window.sudoku.boards[1].push('920800000000004807000069021061093000830147060004600100050080013082000004379410080');
window.sudoku.boards[1].push('900000546603200090548000000001003470000047260094008035006980000180076054009400002');
window.sudoku.boards[1].push('000831540013004090000060000000500078035007200794008130050902013100000900009405682');
window.sudoku.boards[1].push('927031006000254007508709000060593070030047060000608105400000013002070954009000000');
window.sudoku.boards[1].push('020030000003254097508769300200593408830000000000008100056980003080000004379400002');
window.sudoku.boards[1].push('000000506013054897548069000000000008005007260004628035400000000002306004079015082');
window.sudoku.boards[1].push('000001000000250890000769020000000000005147260790008100456080010180376954079410000');
window.sudoku.boards[1].push('426000570000300000805472060004609357600040081010200096702800010001500000050104030');
window.sudoku.boards[1].push('420900003000050800835472060084610000090040280000000000000000015361527908050164700');
window.sudoku.boards[1].push('006080003009000820000072100000009350093005080000238096742890000061000908058064730');
window.sudoku.boards[1].push('026980070000306820835070109204619350600000000507030000000893010000527940900000000');
window.sudoku.boards[1].push('426981573000000800800070169280010350000005201010200096700090010000000008008164002');
window.sudoku.boards[1].push('006001573179356824000470000000000000000745000510000090742093010361500000058100002');
window.sudoku.boards[1].push('026080500109000004830070160084610007600000080500030490040000610001027908950064030');
window.sudoku.boards[1].push('400081500170006024835400000000600000090040000010208490042000615300520948950000032');
window.sudoku.boards[1].push('400081070179300020830470060000600350000000000517000096740093610061500000000164730');
window.sudoku.boards[1].push('000000070000056804805470069200600000693745000017208496702093600000007948000000002');
window.sudoku.boards[1].push('489050000015002000237480501520003870008590010901020000100000005000300040006201793');
window.sudoku.boards[1].push('089150000615702000007009061024000800300097402971000000000000025790005008056201093');
window.sudoku.boards[1].push('489156230615700004237409500000003800000000000971000056040000000000005148856240000');
window.sudoku.boards[1].push('000000000005732904237000500000613800300000012900024350000078620792065000056200703');
window.sudoku.boards[1].push('480006007600702000000489001500003000060000400000004050003978625092365008856200790');
window.sudoku.boards[1].push('480156207600002900007009000000010070308000012900020056100978025702365008050200000');
window.sudoku.boards[1].push('000150000015000004030400560524603000000007410001000356140900000792365100850000793');
window.sudoku.boards[1].push('400056030600002900000000061500000000068097402070024006043078005792005140856200700');
window.sudoku.boards[1].push('009050237000032004200080000520613000000500400001824356003970020090065000800001793');
window.sudoku.boards[1].push('400000000005702980000000500000613879300597412970000000003978020700005148800201700');
window.sudoku.boards[1].push('200007000000890002018503697076341258001900736500080100100008000000039400709400000');
window.sudoku.boards[1].push('000000004367890512408003697076040000041900030500700009150000900000030070700465021');
window.sudoku.boards[1].push('290017000067094502418003097076000008041950030000000040104000963082100000030065000');
window.sudoku.boards[1].push('205610004307800012400523007006001200001900706500000000000270063600109405739400000');
window.sudoku.boards[1].push('295017304000094502010520600006340000000000006500700140054078000080000075730400821');
window.sudoku.boards[1].push('000607004367894500000000000076000050040952036023086109100000060680139000709060020');
window.sudoku.boards[1].push('290617300367800000000000600000000008840952736500700009000200000002039470730065821');
window.sudoku.boards[1].push('095610080000094012010520607070000058000000030000086149104000003082039470709400800');
window.sudoku.boards[1].push('205600000060000002418503007970001200000002036503786000004278060682009005000465000');
window.sudoku.boards[1].push('295617300360000000008503607900000200001900006500700049154000003082100470739000001');
window.sudoku.boards[1].push('000000400041903000025140963030002010000000690652710800000005340308071206504020080');
window.sudoku.boards[1].push('900050471000000008805000060430680710180500002652000030216890000000071250570006100');
window.sudoku.boards[1].push('000250070740003000025140900009682015180500000002010000206800000390001250500326089');
window.sudoku.boards[1].push('960000000740963520000007960400002705087534600050000830210800040008470000000006189');
window.sudoku.boards[1].push('003000070001963528025107903000082700000000092650000000206890000000001256004306189');
window.sudoku.boards[1].push('000258000000000508025140960000000005180504002650009830016095347090470000074300100');
window.sudoku.boards[1].push('960050470740963500805047903009600705000034092002019000006800000090000250074300000');
window.sudoku.boards[1].push('960008471741000020000007900000082700007504002652019804206000007398000200000000189');
window.sudoku.boards[1].push('960050000001060028005047903439680000100500690002709000016095307000000006574020009');
window.sudoku.boards[1].push('063000070741960500005007000000680000087530090000019000016890340300000056570306189');
window.sudoku.boards[2].push('000000000603250807040709020001090070005040000090628100400002713182306900000410002');
window.sudoku.boards[2].push('000000000013254890548060000001000008000047000094020035450900003000376950309000682');
window.sudoku.boards[2].push('927030540600000890540009021061000000000040260000608135406002710000006904309000000');
window.sudoku.boards[2].push('900800000000004807000069021061093000830147060004600100050080013082000004379400080');
window.sudoku.boards[2].push('000000546603200090548000000001003470000047260094008035006980000180076054000400002');
window.sudoku.boards[2].push('000831540013004090000060000000500008035007200790008130050902013100000900009405682');
window.sudoku.boards[2].push('920031006000254007508709000000593070030047060000608105400000013002070954009000000');
window.sudoku.boards[2].push('020030000003254097500769300200503408830000000000008100056980003080000004379400002');
window.sudoku.boards[2].push('000000500013054897548069000000000008005007260004628035000000000002306004079015082');
window.sudoku.boards[2].push('000000000000250890000769020000000000005147260790008100056080010180376954079410000');
window.sudoku.boards[2].push('426000500000300000805472060004609350600040081010200096702800010001500000050104030');
window.sudoku.boards[2].push('420900003000050800835402060084610000090040280000000000000000015361527900050164700');
window.sudoku.boards[2].push('006080003009000820000072100000009050093005080000230096742890000061000908058064730');
window.sudoku.boards[2].push('026980070000306820835070109204619350600000000500030000000893010000027940900000000');
window.sudoku.boards[2].push('426981573000000800800070169280010350000005200010200096700090000000000008008164002');
window.sudoku.boards[2].push('006001573179356824000070000000000000000745000510000090742093010361500000008100002');
window.sudoku.boards[2].push('026080500109000004830070160004610007600000080500030490000000610001027908950064030');
window.sudoku.boards[2].push('400081500100006024835400000000600000090040000010208490042000615300520948900000032');
window.sudoku.boards[2].push('400081070179300020830470060000600350000000000017000096740093610061500000000064730');
window.sudoku.boards[2].push('000000070000056804805470069200600000693745000007208406702093600000007948000000002');
window.sudoku.boards[2].push('489050000015002000237480501520003870000590010901020000100000005000300040006001793');
window.sudoku.boards[2].push('089150000615702000007009061024000800000097402971000000000000005790005008056201093');
window.sudoku.boards[2].push('489156230615700004037409500000003800000000000901000056040000000000005148856240000');
window.sudoku.boards[2].push('000000000000732904037000500000613800300000012900024350000078620792065000056200703');
window.sudoku.boards[2].push('480006007600702000000489001500003000060000400000004050003978620092365008856000790');
window.sudoku.boards[2].push('480156207600000900007000000000010070308000012900020056100978025702365008050200000');
window.sudoku.boards[2].push('000150000005000004030400560524603000000007410001000356140900000702365100850000793');
window.sudoku.boards[2].push('400056030600002000000000061500000000068097402070024000043078005792005140856200700');
window.sudoku.boards[2].push('009050237000032004200080000520013000000500400001824056003970020090065000800001793');
window.sudoku.boards[2].push('400000000000702980000000500000613870300597412970000000003978020700005148800201700');
window.sudoku.boards[2].push('200007000000890002018503690076341258001900730500080100100008000000039400709400000');
window.sudoku.boards[2].push('000000004367890512408003697076040000041900030500700009100000900000000070700465021');
window.sudoku.boards[2].push('290017000067094502418003097076000008041950030000000040004000063082100000030065000');
window.sudoku.boards[2].push('205610004307800002400023007006001200001900706500000000000270063600109405739400000');
window.sudoku.boards[2].push('295017004000094502010520600006340000000000006500700140004078000080000075730400821');
window.sudoku.boards[2].push('000607004367894000000000000076000050040952036023086109100000060680139000709000020');
window.sudoku.boards[2].push('290617300367800000000000600000000008840952736500700009000000000002039470730005821');
window.sudoku.boards[2].push('095010080000004012010520607070000058000000030000086149104000003082039470709400800');
window.sudoku.boards[2].push('005600000060000002418503007970001200000000036503786000004278060682009005000465000');
window.sudoku.boards[2].push('295617300060000000008503607900000000001900006500700049154000003082100470739000001');
window.sudoku.boards[2].push('000000400041903000025140063030002010000000690652710800000005040308071206504020080');
window.sudoku.boards[2].push('000050071000000008805000060430680710180500002652000030216890000000071250570006100');
window.sudoku.boards[2].push('000250070740003000025140900009682015100000000002010000206800000390001250500326089');
window.sudoku.boards[2].push('960000000740903520000007960400002705007534600050000830210800040008470000000006189');
window.sudoku.boards[2].push('003000070001963528005107903000082700000000092650000000206890000000000256004306189');
window.sudoku.boards[2].push('000258000000000508025140060000000000180504002650009830016095347090470000074300100');
window.sudoku.boards[2].push('960050470740963500805047903009600705000034092000010000006800000090000250074300000');
window.sudoku.boards[2].push('960008071741000000000007900000082700007504002652019804206000007398000200000000189');
window.sudoku.boards[2].push('900000000001060028005047903439680000100500690002709000016095307000000006574020009');
window.sudoku.boards[2].push('063000070741960500005007000000080000087530090000019000016890340300000056570300189');
window.sudoku.boards[3].push('000000000603250807040709020001000070005040000090628100000002713182306900000410002');
window.sudoku.boards[3].push('000000000013254890548060000001000000000047000094020035400900003000376950309000682');
window.sudoku.boards[3].push('927030540600000890540009020061000000000040260000608135406002710000006904300000000');
window.sudoku.boards[3].push('900800000000000807000069020061093000830147060004600100050080013082000004379400080');
window.sudoku.boards[3].push('000000046603200090548000000001003470000047260094008035006980000180076050000400002');
window.sudoku.boards[3].push('000801540013004090000060000000500008005007200790008130050902013100000900009405682');
window.sudoku.boards[3].push('920031006000254007508709000000593070030047060000608105400000013002070054000000000');
window.sudoku.boards[3].push('020030000003254097500769300200503408830000000000008100006080003080000004379400002');
window.sudoku.boards[3].push('000000500013054897548069000000000008005007200004628035000000000002306004079010082');
window.sudoku.boards[3].push('000000000000050890000769020000000000005147260090008100056080010180376954079410000');
window.sudoku.boards[3].push('420000500000300000805472060004609350600040080010200096702800010001500000050104030');
window.sudoku.boards[3].push('420900003000050800835402060084610000090040280000000000000000005361027900050164700');
window.sudoku.boards[3].push('006080003000000820000072100000009050093005080000230096742090000061000908058064730');
window.sudoku.boards[3].push('026980070000306820835070109204619350600000000500030000000893000000027040900000000');
window.sudoku.boards[3].push('406981570000000800800070169280010350000005200010200096700090000000000008008164002');
window.sudoku.boards[3].push('006001573109356824000070000000000000000745000500000090742093010361500000008100002');
window.sudoku.boards[3].push('026080500109000004830070160004610007600000080500030490000000600001007908950064030');
window.sudoku.boards[3].push('400081500100000024835400000000600000090040000000208490042000615300520948900000032');
window.sudoku.boards[3].push('400081070179300020830470000000000350000000000017000096740093610061500000000064730');
window.sudoku.boards[3].push('000000070000056804005470069200600000693745000007208406702093000000007948000000002');
window.sudoku.boards[3].push('489050000015002000237480500520003870000090010901020000100000005000300040006001793');
window.sudoku.boards[3].push('089150000615702000000009061024000800000007402971000000000000005790005008056201093');
window.sudoku.boards[3].push('489156230615700000037409500000003800000000000901000056040000000000000148856240000');
window.sudoku.boards[3].push('000000000000732904037000500000613800300000012900024350000078620702065000056000703');
window.sudoku.boards[3].push('480006007600702000000489001500003000060000400000004050003978620092360008856000090');
window.sudoku.boards[3].push('480056007600000900007000000000010070308000012900020056100978025702365008050200000');
window.sudoku.boards[3].push('000150000005000004030400560504603000000007410001000356140900000702365000850000793');
window.sudoku.boards[3].push('400056030000002000000000061500000000068097402070024000043078005092005140856200700');
window.sudoku.boards[3].push('009050237000032004200080000520010000000500400001824050003970020090065000800001793');
window.sudoku.boards[3].push('400000000000702980000000500000613870300597012970000000003908020700005148800201700');
window.sudoku.boards[3].push('200007000000890002008503690006341258001900730500080100100008000000039400709400000');
window.sudoku.boards[3].push('000000004360890512408003097076040000041900030500700009100000900000000070700465021');
window.sudoku.boards[3].push('290017000067094502418003097076000008041950000000000000004000063082100000030065000');
window.sudoku.boards[3].push('205610004307000002400023007006001200001900706500000000000070063600109405739400000');
window.sudoku.boards[3].push('295017004000094502010520600006340000000000006500700040004070000080000075730400821');
window.sudoku.boards[3].push('000600004367894000000000000006000050040952036023086109100000060680139000709000020');
window.sudoku.boards[3].push('290617300367800000000000600000000008840952736500700000000000000002039400730005821');
window.sudoku.boards[3].push('095010080000004002010520607070000058000000000000086149104000003082039470709400800');
window.sudoku.boards[3].push('005000000060000002418503007970001200000000036503780000004278060682009005000465000');
window.sudoku.boards[3].push('295617300060000000000503607900000000001900006500700049154000003082100470730000001');
window.sudoku.boards[3].push('000000400041903000025140063030002010000000690652710800000005040000071206504020080');
window.sudoku.boards[3].push('000050071000000008805000060430680710180500002652000030216890000000071050500006100');
window.sudoku.boards[3].push('000250070740003000025140900009682015100000000000010000206800000390001250500320089');
window.sudoku.boards[3].push('960000000740903520000007900000002705007534600050000830210800040008470000000006189');
window.sudoku.boards[3].push('003000070001963520005107903000082700000000092650000000206890000000000250004306189');
window.sudoku.boards[3].push('000258000000000508025140060000000000180504002650009830016090347090470000004300100');
window.sudoku.boards[3].push('960050470740963500805047003009000705000034092000010000006800000090000250074300000');
window.sudoku.boards[3].push('960008071741000000000007900000082000007504002652019804206000007308000200000000189');
window.sudoku.boards[3].push('900000000001060028005047903439680000000500690002709000016095307000000006574000009');
window.sudoku.boards[3].push('063000070740960500005007000000080000087530090000019000016890340300000006570300189');
window.sudoku.boards[4].push('000000000603250807040709020000000070005040000090628100000000713102306900000410002');
window.sudoku.boards[4].push('000000000000254890548060000001000000000047000090020035400900003000376950309000682');
window.sudoku.boards[4].push('927030500000000890540009020061000000000040260000608135400002710000006904300000000');
window.sudoku.boards[4].push('900800000000000807000069020060093000830147000004600100050080013082000004370400080');
window.sudoku.boards[4].push('000000046603200000548000000001003470000047260090008035000980000180076050000400002');
window.sudoku.boards[4].push('000800540013004090000060000000500000005007200790008130050902013100000900009405082');
window.sudoku.boards[4].push('920030006000054007508709000000593070030040060000608105400000013002070054000000000');
window.sudoku.boards[4].push('020000000003254097500769000200503408830000000000000100006080003080000004379400002');
window.sudoku.boards[4].push('000000500013054897548060000000000008005007200004628030000000000002300004079010082');
window.sudoku.boards[4].push('000000000000050890000769020000000000005147260090008100056080010180376004079400000');
window.sudoku.boards[4].push('420000500000300000805472060004609300600040080010200096700800010000500000050104030');
window.sudoku.boards[4].push('420900003000050800835002060084610000090040280000000000000000005361027900000160700');
window.sudoku.boards[4].push('006080003000000820000072100000009050093005000000230006740090000061000908058064730');
window.sudoku.boards[4].push('026980070000006020835070109204619350600000000500030000000893000000027040000000000');
window.sudoku.boards[4].push('406981570000000000000070169080010350000005200010200096700090000000000008008164002');
window.sudoku.boards[4].push('006001573109306820000070000000000000000745000500000090742093010360500000008100002');
window.sudoku.boards[4].push('026080500109000004800070160000610007000000080500030490000000600001007908950064030');
window.sudoku.boards[4].push('400081500100000024835000000000600000090040000000008490042000610300520948900000032');
window.sudoku.boards[4].push('400081000109300020830470000000000350000000000017000096740093600061500000000064730');
window.sudoku.boards[4].push('000000070000050804005400060200600000693745000007208406702093000000007948000000002');
window.sudoku.boards[4].push('489050000010002000237480500520003870000090010900020000100000005000300040000001793');
window.sudoku.boards[4].push('089150000615702000000009060024000800000007402901000000000000005790005008056201003');
window.sudoku.boards[4].push('409156230610700000037009500000003800000000000901000056040000000000000148856240000');
window.sudoku.boards[4].push('000000000000732904037000500000613800000000012900024350000078620002060000056000703');
window.sudoku.boards[4].push('480006007600002000000489001000003000060000400000004050003978620092360008850000090');
window.sudoku.boards[4].push('480056007600000900007000000000010070308000012900020056000078020702365008050200000');
window.sudoku.boards[4].push('000150000000000004030400560504003000000007410001000356140900000702365000800000793');
window.sudoku.boards[4].push('400056030000000000000000061500000000068097400070024000043078005092000140856200700');
window.sudoku.boards[4].push('009050237000032004200000000500010000000500400001824050000970020090065000800001793');
window.sudoku.boards[4].push('400000000000702980000000500000613870300507012070000000003900020700005148800201700');
window.sudoku.boards[4].push('200007000000800002008503690006341250001900730500080100100008000000030400709400000');
window.sudoku.boards[4].push('000000004360090012408003007076040000041900030500700009100000900000000070700465021');
window.sudoku.boards[4].push('290017000007094502418003097076000008001950000000000000004000003082100000030065000');
window.sudoku.boards[4].push('205610004307000002000023007006001200001900706500000000000070063000109005739400000');
window.sudoku.boards[4].push('295017004000094502010500600006300000000000006500700040004000000080000075730400821');
window.sudoku.boards[4].push('000600004367890000000000000000000050040952036023086009100000060680139000709000020');
window.sudoku.boards[4].push('290617300367800000000000600000000008840050036500700000000000000002039400730005821');
window.sudoku.boards[4].push('095010000000004002010520600070000058000000000000086149104000003082039470709400000');
window.sudoku.boards[4].push('005000000060000002410503007970001200000000030503780000004208060682009005000465000');
window.sudoku.boards[4].push('295010300060000000000503607900000000001900006500700049154000003082100470700000001');
window.sudoku.boards[4].push('000000000041903000025100063030002010000000690602710800000005040000071206504020080');
window.sudoku.boards[4].push('000050071000000008805000060430600010180000002652000030216890000000071050500006100');
window.sudoku.boards[4].push('000250070740003000025140900009682015100000000000000000006800000390001250500300089');
window.sudoku.boards[4].push('960000000740903520000007900000002705007534600050000030210000040008470000000000189');
window.sudoku.boards[4].push('003000070001963500005107903000082700000000002650000000206890000000000050004306189');
window.sudoku.boards[4].push('000208000000000508025140060000000000180504002650009830016090307090400000004300100');
window.sudoku.boards[4].push('960050470740963500805040003009000705000034092000010000006800000090000250070000000');
window.sudoku.boards[4].push('960008071741000000000007900000082000007504000650019804206000007308000200000000109');
window.sudoku.boards[4].push('000000000001060028005047903439680000000500090002709000016095300000000006574000009');
window.sudoku.boards[4].push('063000070740960500005007000000080000087530090000019000006890300300000006070300189');
window.sudoku.boards[5].push('000000000603250807040709020000000070005040000090628100000000713102306900000410002');
window.sudoku.boards[5].push('000000000000254890548060000001000000000047000090020035400900003000376950309000682');
window.sudoku.boards[5].push('927030500000000890540009020061000000000040260000608135400002710000006904300000000');
window.sudoku.boards[5].push('900800000000000807000069020060093000830147000004600100050080013082000004370400080');
window.sudoku.boards[5].push('000000046603200000548000000001003470000047260090008035000980000180076050000400002');
window.sudoku.boards[5].push('000800540013004090000060000000500000005007200790008130050902013100000900009405082');
window.sudoku.boards[5].push('920030006000054007508709000000593070030040060000608105400000013002070054000000000');
window.sudoku.boards[5].push('020000000003254097500769000200503408830000000000000100006080003080000004379400002');
window.sudoku.boards[5].push('000000500013054897548060000000000008005007200004628030000000000002300004079010082');
window.sudoku.boards[5].push('000000000000050890000769020000000000005147260090008100056080010180376004079400000');
window.sudoku.boards[5].push('420000500000300000805472060004609300600040080010200096700800010000500000050104030');
window.sudoku.boards[5].push('420900003000050800835002060084610000090040280000000000000000005361027900000160700');
window.sudoku.boards[5].push('006080003000000820000072100000009050093005000000230006740090000061000908058064730');
window.sudoku.boards[5].push('026980070000006020835070109204619350600000000500030000000893000000027040000000000');
window.sudoku.boards[5].push('406981570000000000000070169080010350000005200010200096700090000000000008008164002');
window.sudoku.boards[5].push('006001573109306820000070000000000000000745000500000090742093010360500000008100002');
window.sudoku.boards[5].push('026080500109000004800070160000610007000000080500030490000000600001007908950064030');
window.sudoku.boards[5].push('400081500100000024835000000000600000090040000000008490042000610300520948900000032');
window.sudoku.boards[5].push('400081000109300020830470000000000350000000000017000096740093600061500000000064730');
window.sudoku.boards[5].push('000000070000050804005400060200600000693745000007208406702093000000007948000000002');
window.sudoku.boards[5].push('489050000010002000237480500520003870000090010900020000100000005000300040000001793');
window.sudoku.boards[5].push('089150000615702000000009060024000800000007402901000000000000005790005008056201003');
window.sudoku.boards[5].push('409156230610700000037009500000003800000000000901000056040000000000000148856240000');
window.sudoku.boards[5].push('000000000000732904037000500000613800000000012900024350000078620002060000056000703');
window.sudoku.boards[5].push('480006007600002000000489001000003000060000400000004050003978620092360008850000090');
window.sudoku.boards[5].push('480056007600000900007000000000010070308000012900020056000078020702365008050200000');
window.sudoku.boards[5].push('000150000000000004030400560504003000000007410001000356140900000702365000800000793');
window.sudoku.boards[5].push('400056030000000000000000061500000000068097400070024000043078005092000140856200700');
window.sudoku.boards[5].push('009050237000032004200000000500010000000500400001824050000970020090065000800001793');
window.sudoku.boards[5].push('400000000000702980000000500000613870300507012070000000003900020700005148800201700');
window.sudoku.boards[5].push('200007000000800002008503690006341250001900730500080100100008000000030400709400000');
window.sudoku.boards[5].push('000000004360090012408003007076040000041900030500700009100000900000000070700465021');
window.sudoku.boards[5].push('290017000007094502418003097076000008001950000000000000004000003082100000030065000');
window.sudoku.boards[5].push('205610004307000002000023007006001200001900706500000000000070063000109005739400000');
window.sudoku.boards[5].push('295017004000094502010500600006300000000000006500700040004000000080000075730400821');
window.sudoku.boards[5].push('000600004367890000000000000000000050040952036023086009100000060680139000709000020');
window.sudoku.boards[5].push('290617300367800000000000600000000008840050036500700000000000000002039400730005821');
window.sudoku.boards[5].push('095010000000004002010520600070000058000000000000086149104000003082039470709400000');
window.sudoku.boards[5].push('005000000060000002410503007970001200000000030503780000004208060682009005000465000');
window.sudoku.boards[5].push('295010300060000000000503607900000000001900006500700049154000003082100470700000001');
window.sudoku.boards[5].push('000000000041903000025100063030002010000000690602710800000005040000071206504020080');
window.sudoku.boards[5].push('000050071000000008805000060430600010180000002652000030216890000000071050500006100');
window.sudoku.boards[5].push('000250070740003000025140900009682015100000000000000000006800000390001250500300089');
window.sudoku.boards[5].push('960000000740903520000007900000002705007534600050000030210000040008470000000000189');
window.sudoku.boards[5].push('003000070001963500005107903000082700000000002650000000206890000000000050004306189');
window.sudoku.boards[5].push('000208000000000508025140060000000000180504002650009830016090307090400000004300100');
window.sudoku.boards[5].push('960050470740963500805040003009000705000034092000010000006800000090000250070000000');
window.sudoku.boards[5].push('960008071741000000000007900000082000007504000650019804206000007308000200000000109');
window.sudoku.boards[5].push('000000000001060028005047903439680000000500090002709000016095300000000006574000009');
window.sudoku.boards[5].push('063000070740960500005007000000080000087530090000019000006890300300000006070300189');
window.sudoku.boards[6].push('000000010020900768160000205300048021008500000000009804630004000001650007700000000');
window.sudoku.boards[6].push('000000500600004009070520000040930000006805430805042600900000047000000000027000356');
window.sudoku.boards[6].push('000600013945000000010000507400100000007048031500026000000007000120980005070060020');
window.sudoku.boards[6].push('000000000603200807040709020000000070005040000090628100000000703102306900000410002');
window.sudoku.boards[6].push('000000000000254890548060000001000000000047000090020035400000003000076950309000682');
window.sudoku.boards[6].push('907030500000000890540009020061000000000040200000608135400002710000006904300000000');
window.sudoku.boards[6].push('900800000000000807000069020060093000830147000004000100050080013082000004370400000');
window.sudoku.boards[6].push('000000046603200000508000000001003400000047260090008035000980000180076050000400002');
window.sudoku.boards[6].push('000800540013000090000060000000500000005007200790000130050902013100000900009405082');
window.sudoku.boards[6].push('920030000000054007508709000000593070030040060000008105400000013002070054000000000');
window.sudoku.boards[6].push('020000000003254097500769000200503008830000000000000100006080003000000004379400002');
window.sudoku.boards[6].push('000000500013050897048060000000000008005007200004628030000000000002300004079010082');
window.sudoku.boards[6].push('000000000000050890000769020000000000005147260090008100056080010180300004079400000');
window.sudoku.boards[6].push('420000500000300000805070060004609300600040080010200096700800010000500000050104030');
window.sudoku.boards[6].push('420900003000050000835002060084610000090040280000000000000000005061027900000160700');
window.sudoku.boards[6].push('006080003000000020000072100000009050093005000000230006740000000061000908058064730');
window.sudoku.boards[6].push('026980070000006020830070109204619050600000000500030000000893000000027040000000000');
window.sudoku.boards[6].push('406981570000000000000070169080010300000005200010200096700090000000000008008104002');
window.sudoku.boards[6].push('006001573109306800000070000000000000000745000500000090740093010360500000008100002');
window.sudoku.boards[6].push('026080500109000004800070160000610007000000080500030490000000000001007908050064030');
window.sudoku.boards[6].push('400081500100000024835000000000600000090040000000008490042000610300520040900000032');
window.sudoku.boards[6].push('400081000109300020830470000000000350000000000007000096740093600001500000000064730');
window.sudoku.boards[6].push('000000070000000804005400060200600000693745000007208400702093000000007948000000002');
window.sudoku.boards[6].push('089050000010002000237400500520003870000090010900020000100000005000300040000001793');
window.sudoku.boards[6].push('089150000615002000000009060024000800000007402901000000000000005790005008006201003');
window.sudoku.boards[6].push('009156230610700000037009500000003800000000000901000006040000000000000148856240000');
window.sudoku.boards[6].push('000000000000732904037000500000013800000000012900024350000078620002060000056000003');
window.sudoku.boards[6].push('480000007000002000000489001000003000060000400000004050003978620092360008850000090');
window.sudoku.boards[6].push('480056007600000900007000000000010070308000012900020056000078020700365008050000000');
window.sudoku.boards[6].push('000150000000000004030400560504003000000007400001000356100900000702365000800000793');
window.sudoku.boards[6].push('400056030000000000000000061500000000068097400070024000043070005092000140806200700');
window.sudoku.boards[6].push('009050237000032004200000000500010000000000400001824050000070020090065000800001793');
window.sudoku.boards[6].push('400000000000702980000000500000013870300507012070000000003900020700005148800200700');
window.sudoku.boards[6].push('200007000000800002008503690006341250000900730500080000100008000000030400709400000');
window.sudoku.boards[6].push('000000004360090012408003007076040000001900030500700009100000900000000000700465021');
window.sudoku.boards[6].push('290017000007004502418003097070000008001950000000000000004000003082100000030065000');
window.sudoku.boards[6].push('205610004307000002000023007006001000001900700500000000000070063000109005739400000');
window.sudoku.boards[6].push('095017004000094502010500600006300000000000006500700040004000000080000075730400021');
window.sudoku.boards[6].push('000600004367890000000000000000000050040052036023080009100000060680139000709000020');
window.sudoku.boards[6].push('290617300367800000000000600000000008840050006500700000000000000002039400730005021');
window.sudoku.boards[6].push('095010000000004002010500600070000058000000000000086149104000003082039470709000000');
window.sudoku.boards[6].push('005000000060000002410503007970001200000000030503780000000208060682009005000405000');
window.sudoku.boards[6].push('295010300060000000000503607900000000001900000500700049054000003082100470700000001');
window.sudoku.boards[6].push('000000000041903000025000003030002010000000690602710800000005040000071206504020080');
window.sudoku.boards[6].push('000050071000000008805000060430600010180000002652000030216890000000071050000006000');
window.sudoku.boards[6].push('000050070740003000025140900009682015100000000000000000006800000390001250500000089');
window.sudoku.boards[6].push('960000000740903520000007900000002705007534600050000030210000040008400000000000089');
window.sudoku.boards[6].push('003000070001960500005107903000082700000000002650000000206090000000000050004306189');
window.sudoku.boards[6].push('000208000000000508025100060000000000180504002650009800016090307090400000004300100');
window.sudoku.boards[6].push('060050470740963000805040003009000705000034092000010000006800000090000250070000000');
window.sudoku.boards[7].push('026080000109000004800070160000610007000000080500030490000000000001007908050064030');
window.sudoku.boards[7].push('000000700009710320000000001000008009000050063500306804140270905300004000005000000');
window.sudoku.boards[7].push('500000008020750061006319000048000529053070000600000000000042300000060010000000005');
window.sudoku.boards[7].push('000094008009500760000000000072005003105206040600030000280001300750020000000000010');
window.sudoku.boards[7].push('900000007623000000015009203050000020000200104000950000002078900490000018000000030');
window.sudoku.boards[7].push('908300000603005001000000003056800300009200050000000076000100905007023000580090000');
window.sudoku.boards[7].push('005204000010090200000000000007000640230006070050037010070060031000005006060310000');
window.sudoku.boards[7].push('570090040000640007402100300006907100900430002700000830000301400800000000000000000');
window.sudoku.boards[7].push('925000004400000000830000020007531600000070000000900000003809200000013069002004100');
window.sudoku.boards[7].push('000600014001092800000000000040031608009078002008900000000000000084200700092050003');
window.sudoku.boards[7].push('830000000005307000097000130060800000000003900008492050200000604040600000500100200');
window.sudoku.boards[7].push('710593020000072500000600000002700000600000000907000138360058000000006800004000010');
window.sudoku.boards[7].push('385000000000308690090074000000410380000009000000005947160000000009720030000000008');
window.sudoku.boards[7].push('000408602589000000000000000008060070000014023300070800800005000007100006005600084');
window.sudoku.boards[7].push('000400000000030000624000000098500070700000903300072065000040000007089200005600380');
window.sudoku.boards[7].push('000000907024900006080670003007400001062735000000000000000000000070000315900301060');
window.sudoku.boards[7].push('075900000000000300040570980024060000160840003700003006000000000001450000000002048');
window.sudoku.boards[7].push('070000600916000000003000080000000805000000003750120006400010000001450002007690140');
window.sudoku.boards[7].push('260180000500009000090002517023010760070000000008000000000000000000096130000031290');
window.sudoku.boards[7].push('003000100900700060702000390000000000005020610179008045051069030000240000000000000');
window.sudoku.boards[7].push('300000000085093040001862300000010730067000000000009002820004090790030800000000000');
window.sudoku.boards[7].push('010600050000157200000002037004090000000006004500870610047060000900000502300000000');
window.sudoku.boards[7].push('702609408000000009600080000004000005003006890500074610040900000900713000000000000');
window.sudoku.boards[7].push('710630000008100000090002000000000025003026004009870000207060081000703500000008000');
window.sudoku.boards[7].push('000000005940000030501600900000000050200031800810500093176000000000010200008700009');
window.sudoku.boards[7].push('509007040700000009000000037000800060004500003800690020021000000070009200003201006');
window.sudoku.boards[7].push('834000500000000009190000000500020000980007300300068070000059801400210000000086000');
window.sudoku.boards[7].push('370058900000009300900040001000080000000200040081005030430000080650030012000020000');
window.sudoku.boards[7].push('000000004400000762360004000000000090010000207000951000054809006080700020001500800');
window.sudoku.boards[7].push('041005080050014200800000000080063100000428000000000030000000000026730005738000009');
window.sudoku.boards[7].push('080070003700010950050000060000709000000000000030000286596200000043097000008006030');
window.sudoku.boards[7].push('000020001002097803000800000080000030000063900790010600100630405000000000009400380');
window.sudoku.boards[7].push('600030097850000000000100804300000050072063100000002000186090700043010200000000000');
window.sudoku.boards[7].push('900700000064005701005002800001200000590004008680900017040000006000000000008500002');
window.sudoku.boards[7].push('006900070100047000000380000001600030000059000860004009504800000000000004983000012');
window.sudoku.boards[7].push('400065000000000000000003059200000003006000090503002468104028000060930000005006010');
window.sudoku.boards[7].push('000000300007560008258900000000007043984000700000000000003740806060080020000020001');
window.sudoku.boards[7].push('100897600590000340000000000000008950000756803000000000020409760400000000000170080');
window.sudoku.boards[7].push('004701060100000030000002057600027540000000600000034078789006000000400000000093000');
window.sudoku.boards[7].push('000000500000040008706280100000000000062009703005600000070094610001360920000100000');
window.sudoku.boards[7].push('063010800008300049970026000000780000000000000000653170290000001086100000000008000');
window.sudoku.boards[7].push('500000000002315060800720010007001008080063450400070000000900003000000500006030002');
window.sudoku.boards[7].push('500400000020709000000000024280000400730000000046810000000000705000970001850031006');
window.sudoku.boards[7].push('004360017080700504000008000700100069003000000010076000590230000000007600000004020');
window.sudoku.boards[7].push('000027506700100008001480200914000000000000000085932004000040029840005000000000000');
window.sudoku.boards[7].push('000300000762150000000086000004500632300000080080000100006700000040000001270001403');
window.sudoku.boards[7].push('000002310001539004706000000000000090073650100004000000000000000102390070400170003');
window.sudoku.boards[7].push('760000000093006704504000000000900000470105000080300061012700039359000000000000000');
window.sudoku.boards[7].push('060000002103000700024079000000000000000005390080047001012000000000012847800500020');
window.sudoku.boards[7].push('000400000000038010000027085004600001800010607001009000036840000009000002128000000');
window.sudoku.boards[8].push('907030000000000890540009020061000000000040200000608035400002710000006004300000000');
window.sudoku.boards[8].push('900800000000000807000069020000093000830107000004000100050080013002000004370400000');
window.sudoku.boards[8].push('020000000003054090500769000200503000830000000000000100006080003000000004379400002');
window.sudoku.boards[8].push('000050000010002000237400500500003870000090010900020000100000005000300040000001793');
window.sudoku.boards[8].push('009050037000032004200000000500010000000000400001824050000070020090065000800000093');
window.sudoku.boards[8].push('000050070740003000005140900009682005100000000000000000006800000390001250500000009');
window.sudoku.boards[8].push('000008071041000000000007900000082000007504000050019804206000007308000200000000009');
window.sudoku.boards[8].push('457100000000040076000000000000000010300000002200005890060700250010500009042900000');
window.sudoku.boards[8].push('000120900000340070006000000090000010000401760200000804000714200013500000500000000');
window.sudoku.boards[8].push('040008073010009000005700600271000000000000000000910002050004000002006190400300050');
window.sudoku.boards[8].push('906000000010009405805000010070005000000002031608000002007004300000570000000021000');
window.sudoku.boards[8].push('760000000000003000090040082000089000010750000008002010000008006070000034002970008');
window.sudoku.boards[8].push('064000300005000700000007082527100000003050009040000000000438270000000000000006058');
window.sudoku.boards[8].push('100302040003000012800000000005000007900000000000061280600010000000458700000070094');
window.sudoku.boards[8].push('091000008020700000800019050000601029003004000000980400060000007400060800000000040');
window.sudoku.boards[8].push('500006000000750000070010204000030009050200106610000070060800000009000012007000040');
window.sudoku.boards[8].push('000005008650001007007000096140000080000000030900140000800520000460000000030900060');
window.sudoku.boards[8].push('008005600000700000060001005005000300000300080001879000520000000100090740600040001');
window.sudoku.boards[8].push('008000000620700400000400003150840009000030004200001006000000000097003010500000702');
window.sudoku.boards[8].push('040000007023000090000069080006007020009030054030050000060170000000000008500004700');
window.sudoku.boards[8].push('000012500603000000000000003150047009800000100000950006000070905407000000080600030');
window.sudoku.boards[8].push('900000007003000400015000000000047000000200100000050806300070005490000010500690032');
window.sudoku.boards[8].push('000000000360000001790002560500009436003080000000000059000500000000108205002030000');
window.sudoku.boards[8].push('280060307004007900700002000000000000903680010000010050170000603030000000800700000');
window.sudoku.boards[8].push('080061300000000000000000008008070000040605702600000050079520080006000200000000194');
window.sudoku.boards[8].push('006000800000000000100603009005820647008400000000000100000980402050130000000007006');
window.sudoku.boards[8].push('500006200000009167000000000000090000803042000140300070030400000000060000020803041');
window.sudoku.boards[8].push('501700000080530060000000000206100400000002000000008670900001756000000300000870001');
window.sudoku.boards[8].push('900018000070600000604000002240000030000050000001300004400903000009007000010082700');
window.sudoku.boards[8].push('009406803010750600000000000086075000000003009000600000060040580500027000000000200');
window.sudoku.boards[8].push('000406870410008600000000000900070024005003009300004050702000000000800000000061200');
window.sudoku.boards[8].push('000000049040608007000003600000200090100000003034100005507020060208076000000000000');
window.sudoku.boards[8].push('000000000000000207700040680800034000009060000030090825000421000200000900063500000');
window.sudoku.boards[8].push('000000549041000230700000000005230100000800000000000005007020360010370000460009000');
window.sudoku.boards[8].push('003070695070002080000000210009750820030000000000400000590000000002596000000000001');
window.sudoku.boards[8].push('820070005070960300004000000000050800731000000000000170000800060000096700380200000');
window.sudoku.boards[8].push('080000000079030046000706300058900000007000080600040057400850030000000000000071000');
window.sudoku.boards[8].push('000004200079000006500000310008917003000000000000040057000850001000003600093070000');
window.sudoku.boards[8].push('000070160000000004640058000087500000001000009050930002000802031120000000000000700');
window.sudoku.boards[8].push('095000008710693000040000000007500000031086070000000802000000430000000006000019020');
window.sudoku.boards[8].push('879010000000206010000000000204805000000000026007000409058104700000000000000970005');
window.sudoku.boards[8].push('943000005000300020000000070080030000030870041500000000860005004004100090000780000');
window.sudoku.boards[8].push('003000000670000029000000073400031000009006500006900007001205000000000000000784150');
window.sudoku.boards[8].push('000010020090050700005000340061380000500000009804000000000000008600002000017005063');
window.sudoku.boards[8].push('700000925300204000000000000000007050002400039800000600000000190680000000417805000');
window.sudoku.boards[8].push('503000000000008095000040070000076080000005012400000600009000000620000007107093200');
window.sudoku.boards[8].push('000000050624305000098000000700500304030000000000040091050602070000704000000000610');
window.sudoku.boards[8].push('000000000020009600530000000080040092010700000000030400073000024001008000094050870');
window.sudoku.boards[8].push('820000000003500907570000060000308014008090200000600500000000050000721009100000000');
window.sudoku.boards[8].push('000010300410506000009203800062300710700000000040000008080400000605000000000000072');
window.sudoku.boards[9].push('095010000000004002010500600070000008000000000000086109004000003082039070000000000');
window.sudoku.boards[9].push('070080500000006810029000000000004060900500000000000080640000000000050700002073004');
window.sudoku.boards[9].push('407000000200000700000604000000000006010000005090020080602005030300090004080010000');
window.sudoku.boards[9].push('100700000000208300400000000000000020005001000000050074508010009003070800020000010');
window.sudoku.boards[9].push('000000024700000069860000000000000008001260000000070031000900000304102000050400000');
window.sudoku.boards[9].push('300020040005090000007040000700003000000700503000900080490000800600502007000000000');
window.sudoku.boards[9].push('400000008030006500500000000740050020300047000000000009060800090001905006000000000');
window.sudoku.boards[9].push('095010000000004002010500600070000008000000000000086149004000003082039070000000000');
window.sudoku.boards[9].push('800007000002508001100000920010040607900005000000000000000034000408000500000000039');
window.sudoku.boards[9].push('009500001030060020000000000700804000000000060152000090507002040001000005600000700');
window.sudoku.boards[9].push('000930000010020305600000008021000087000000001004590000800307000000040670000000000');
window.sudoku.boards[9].push('920000000000000600000100953007049000008300004500000070830000000000021300001050000');
window.sudoku.boards[9].push('000000001305900007000062900007000038090005100000610000002000000050001000070800400');
window.sudoku.boards[9].push('000028006000390000098100000019506300430000000000000700000000008200700500000000012');
window.sudoku.boards[9].push('801090000000000020004805300000000001070040050000020090508004000000002000000039260');
window.sudoku.boards[9].push('000000060710000000000090200001000095009620800040000000000000001004035000580740006');
window.sudoku.boards[9].push('001000047720000050000604000807000600100035400400000000000007000000800300005021000');
window.sudoku.boards[9].push('020000008000000300000503070000004005102000000800230600050000900003670000007180000');
window.sudoku.boards[9].push('000000009005490000000036007006000013080002070000004020000080002030000800200001500');
window.sudoku.boards[9].push('000000980605003000040800070000400000060000009130000000003054000096200800000007020');
window.sudoku.boards[9].push('734009000009007600000000001003000002850000000000860090000000700040500000560000120');
window.sudoku.boards[9].push('006040200001500409070000000000000000000001700030020095009800000600000002048007600');
window.sudoku.boards[9].push('900150000004700026003000000000000007000000009580064000030000800000006900009410060');
window.sudoku.boards[9].push('000304000000000003900006200600000007200000050090018040008600000046005010000070080');
window.sudoku.boards[9].push('630090000000000007800020000000000009008003040100780600000042180903500000000100000');
window.sudoku.boards[9].push('000000000020013400800000057005060100000000300000401072500002900080000040740000000');
window.sudoku.boards[9].push('010000000000000004027043100000009000086000000503002068004008900000031700005000000');
window.sudoku.boards[9].push('000000000000800002408170000000050003010000004205007190000006201007000500034000000');
window.sudoku.boards[9].push('000006983300070020000400000000002006500003000004000750068027000001800000000000009');
window.sudoku.boards[9].push('000000000140000068530400000000203004000500000007049620000000000000301000096000072');
window.sudoku.boards[9].push('040010700000000000003504000000000210806300000000000007000080609280060305000920000');
window.sudoku.boards[9].push('300020040005090000007040000700003000000700523000900080490000800600502007000000000');
window.sudoku.boards[9].push('000800001801600300040000050600000780000005000020100060300000007000070249006000000');
window.sudoku.boards[9].push('940700050000004896001000070000065000830000000000000000000006002070820300019000000');
window.sudoku.boards[9].push('200000000000003800000018635001760050087000000000000000000400000300006420806001000');
window.sudoku.boards[9].push('700000000002783000000006800000025009400000000358000400640009000000200000000050017');
window.sudoku.boards[9].push('070000400000093000006000370002079000900040000000000109140600030000308000200000005');
window.sudoku.boards[9].push('000061240000002300000000008340850002020000107000000000860900000030000000000400039');
window.sudoku.boards[9].push('000000000003012600546000007010040060800000004070000000000000095060097000400500800');
window.sudoku.boards[9].push('000300004050000810100000030000000007940000000000860002000920000003005070700080506');
window.sudoku.boards[9].push('000006008030041000000300020000090000905080003106000502000050000000008910400000007');
window.sudoku.boards[9].push('000002030805000900000000700000891006000500000004060300960000040030609000040000200');
window.sudoku.boards[9].push('050010004020009030007080002010000000000000408300500000000000093005498700000002000');
window.sudoku.boards[9].push('000000001600500000070008006020000900750000000800302000010030005500000060004960080');
window.sudoku.boards[9].push('000800004001600300700009200080005070000092800400000000000037000023950000000000009');
window.sudoku.boards[9].push('060003001000000932009000800000080000907050600000000007000000073500048020001090000');
window.sudoku.boards[9].push('000000900010600000000040005140700000000000089750000000000002010007509300530006004');
window.sudoku.boards[9].push('030002500000000001400590000000019800200000000000000069008000402001080000060740003');
window.sudoku.boards[9].push('007800009000076038600000000098200000003000000000005060700080000000000092002640100');
window.sudoku.boards[9].push('006000000000080003300000420580700000029006100000050090008640000000092000007000600');

window.sudoku.target = {
    ROW: "row",
    COLUMN: "column",
    SQUARE: "square"
};

window.sudoku.run = function (inputSudokuBoard) {
    var number, i;
    var certaintySudokuBoard = null;
    var bestSoFarSudokuBoard = null, workingSudokuBoard = window.sudoku.returnTwoDimensionalDataStructure(9, 9);
    var candidates, squareCellToRowColumnMapper, candidatesAfterAddedNumbersWithCertainty = null;
    var maxNumberOfAttemptsToSolveSudoku = 100, numberOfAttemptsToSolveSudoku = 0;
    var numberOfCellsSetInInputSudokuBoard = 0, numberOfCellsSetInBestSoFar = 0;
    var numberOfCandidates = [0];
    var numberOfCandidatesAfterAddedNumbersWithCertainty = [0];
    var sudokuSolved = false, numbersAddedWithCertaintyAndThenNoCandidates = false;
    var msg;
    var cellsRemainToSet = [], cellsRemainToSetAfterAddedNumbersWithCertainty = null;
    var indexNumber = [0, 0];

    msg = window.sudoku.getInputSudokuBoard(inputSudokuBoard, workingSudokuBoard, cellsRemainToSet);

    if (msg !== null) {
        return msg;
    }

    squareCellToRowColumnMapper = window.sudoku.returnSquareCellToRowColumnMapper();
    msg = window.sudoku.validateSudokuBoard(workingSudokuBoard, squareCellToRowColumnMapper);

    if (msg !== null) {
        return msg;
    }

    if (cellsRemainToSet.length === 0) {
        return "A complete sudoku was given as input. There is nothing to solve.";
    }

    candidates = window.sudoku.returnThreeDimensionalDataStructure(9, 9, 10);
    numberOfCandidates[0] = window.sudoku.initCandidates(workingSudokuBoard, squareCellToRowColumnMapper, candidates);

    if (numberOfCandidates[0] === 0) {
        return "It is not possible to add any number to the sudoku.";
    }

    numberOfCellsSetInInputSudokuBoard = 81 - cellsRemainToSet.length;

    while (numberOfAttemptsToSolveSudoku < maxNumberOfAttemptsToSolveSudoku && !sudokuSolved && !numbersAddedWithCertaintyAndThenNoCandidates) {
        if (numberOfAttemptsToSolveSudoku > 0) {
            window.sudoku.restoreState(cellsRemainToSet, cellsRemainToSetAfterAddedNumbersWithCertainty, numberOfCandidatesAfterAddedNumbersWithCertainty, workingSudokuBoard, certaintySudokuBoard, candidates, candidatesAfterAddedNumbersWithCertainty, numberOfCandidates);
        }

        while (numberOfCandidates[0] > 0) {
            number = 0;
            i = 0;

            while (i < cellsRemainToSet.length && number === 0) {
                row = cellsRemainToSet[i][0];
                column = cellsRemainToSet[i][1];
                number = window.sudoku.tryFindNumberToSetInCellWithCertainty(row, column, candidates, squareCellToRowColumnMapper);
                i = (number === 0) ? i + 1 : i;
            }

            if (number === 0) {
                window.sudoku.simulateOneNumber(candidates, cellsRemainToSet, indexNumber);
                i = indexNumber[0];
                number = indexNumber[1];
                row = cellsRemainToSet[i][0];
                column = cellsRemainToSet[i][1];

                if (certaintySudokuBoard === null) {
                    certaintySudokuBoard = window.sudoku.returnTwoDimensionalDataStructure(9, 9);
                    cellsRemainToSetAfterAddedNumbersWithCertainty = [];
                    candidatesAfterAddedNumbersWithCertainty = window.sudoku.returnThreeDimensionalDataStructure(9, 9, 10);
                    window.sudoku.saveState(cellsRemainToSet, cellsRemainToSetAfterAddedNumbersWithCertainty, numberOfCandidates, workingSudokuBoard, certaintySudokuBoard, candidates, candidatesAfterAddedNumbersWithCertainty, numberOfCandidatesAfterAddedNumbersWithCertainty);
                }
            }

            workingSudokuBoard[row - 1][column - 1] = number;
            cellsRemainToSet.splice(i, 1);
            numberOfCandidates[0] -= window.sudoku.updateCandidates(candidates, squareCellToRowColumnMapper, row, column, number);
        }

        if (cellsRemainToSet.length === 0) {
            sudokuSolved = true;
        }
        else if (certaintySudokuBoard === null) {
            numbersAddedWithCertaintyAndThenNoCandidates = true;
            numberOfCellsSetInBestSoFar = 81 - cellsRemainToSet.Count;
        }
        else {
            if (bestSoFarSudokuBoard === null)
                bestSoFarSudokuBoard = window.sudoku.returnTwoDimensionalDataStructure(9, 9);

            numberOfCellsSetInBestSoFar = window.sudoku.checkIfCanUpdateBestSoFarSudokuBoard(numberOfCellsSetInBestSoFar, cellsRemainToSet, workingSudokuBoard, bestSoFarSudokuBoard);
            numberOfAttemptsToSolveSudoku++;
        }
    }

    return window.sudoku.returnResult(sudokuSolved, numberOfCellsSetInInputSudokuBoard, numberOfCellsSetInBestSoFar, workingSudokuBoard, bestSoFarSudokuBoard);
};

window.sudoku.copyList = function(from, to) {
    to.splice(0, to.length);

    for (var i = 0; i < from.length; i++) {
        to.push(from[i]);
    }
};

window.window.sudoku.copySudokuBoard = function(sudokuBoardFrom, sudokuBoardTo) {
    for (var row = 1; row <= 9; row++) {
        for (var column = 1; column <= 9; column++) {
            sudokuBoardTo[row - 1][column - 1] = sudokuBoardFrom[row - 1][column - 1];
        }
    }
};

window.sudoku.copyCandidates = function(candidatesFrom, candidatesTo) {
    for (var row = 1; row <= 9; row++) {
        for (var column = 1; column <= 9; column++) {
            for (var i = 0; i < 10; i++) {
                candidatesTo[row - 1][column - 1][i] = candidatesFrom[row - 1][column - 1][i];
            }
        }
    }
};

window.sudoku.saveState = function(cellsRemainToSet, cellsRemainToSetAfterAddedNumbersWithCertainty, numberOfCandidates, workingSudokuBoard, certaintySudokuBoard, candidates, candidatesAfterAddedNumbersWithCertainty, numOfCandidatesAfterAddedNumbersWithCert) {
    window.sudoku.copyList(cellsRemainToSet, cellsRemainToSetAfterAddedNumbersWithCertainty);
    window.sudoku.copySudokuBoard(workingSudokuBoard, certaintySudokuBoard);
    window.sudoku.copyCandidates(candidates, candidatesAfterAddedNumbersWithCertainty);
    numOfCandidatesAfterAddedNumbersWithCert[0] = numberOfCandidates[0];
};

window.sudoku.restoreState = function(cellsRemainToSet, cellsRemainToSetAfterAddedNumbersWithCertainty, numOfCandidatesAfterAddedNumWithCert, workingSudokuBoard, certaintySudokuBoard, candidates, candidatesAfterAddedNumbersWithCertainty, numOfCandidates) {
    window.sudoku.copyList(cellsRemainToSetAfterAddedNumbersWithCertainty, cellsRemainToSet);
    window.sudoku.copySudokuBoard(certaintySudokuBoard, workingSudokuBoard);
    window.sudoku.copyCandidates(candidatesAfterAddedNumbersWithCertainty, candidates);
    numOfCandidates[0] = numOfCandidatesAfterAddedNumWithCert[0];
};

window.sudoku.getInputSudokuBoard = function (inputSudokuBoard, sudokuBoard, cellsRemainToSet) {
    var rows, columns, row, column, n;

    rows = inputSudokuBoard.split("\r\n");

    if (rows.length !== 9) {
        return "Number of rows in input file are not 9 as expected!";
    }

    for (row = 1; row <= 9; row++) {
        columns = rows[row - 1].split(' ');

        if (columns.length !== 9) {
            return "Number of columns in input file in row " + row + " are not 9 as expected!";
        }

        for (column = 1; column <= 9; column++) {
            n = Number(columns[column - 1]);

            if (isNaN(n) || Math.trunc(n) !== n) {
                return "The value \"" + columns[column - 1] + "\" in row " + row + " and column " + column + " in input file is not a valid integer!";
            }

            if (n < 0 || n > 9) {
                return "The value \"" + columns[column - 1] + "\" in row " + row + " and column " + column + " in input file is not an integer in the interval [0, 9] as expected!";
            }

            sudokuBoard[row - 1][column - 1] = n;

            if (n === 0) {
                cellsRemainToSet.push([row, column]);
            }
        }
    }

    return null;
};

window.sudoku.candidateIsAlonePossible = function(number, candidates, squareCellToRowColumnMapper, t, target) {
    var row = 0, column = 0, n, i, j, numberOfOccurenciesOfNumber = 0;

    for (i = 0; i < 9; i++) {
        switch (target) {
            case window.sudoku.target.ROW:
                row = t;
                column = i + 1;
                break;
            case window.sudoku.target.COLUMN:
                row = i + 1;
                column = t;
                break;
            case window.sudoku.target.SQUARE:
                row = squareCellToRowColumnMapper[t - 1][i][0];
                column = squareCellToRowColumnMapper[t - 1][i][1];
                break;
        }

        n = candidates[row - 1][column - 1][0];

        if (n > 0) {
            for (j = 0; j < n; j++) {
                if (candidates[row - 1][column - 1][1 + j] === number) {
                    numberOfOccurenciesOfNumber++;

                    if (numberOfOccurenciesOfNumber > 1)
                        return false;
                }
            }
        }
    }

    return true;
};

window.sudoku.removeNumberIfItExists = function(v, number) {
    var i, n, index = -1, returnValue = 0;

    n = v[0];
    i = 1;
    while (i <= n && index === -1) {
        if (v[i] === number) {
            index = i;
            returnValue = 1;
        }
        else
            i++;
    }

    if (index !== -1) {
        while (index + 1 <= n) {
            v[index] = v[index + 1];
            index++;
        }

        v[0]--;
    }

    return returnValue;
};

window.sudoku.returnNumberOfOccurenciesOfNumber = function(sudokuBoard, squareCellToRowColumnMapper, number, t, target) { //t refers to a row, column or square
    var row = 0, column = 0, n = 0;

    for (var i = 0; i < 9; i++) {
        switch (target) {
            case window.sudoku.target.ROW:
                row = t;
                column = i + 1;
                break;
            case window.sudoku.target.COLUMN:
                row = i + 1;
                column = t;
                break;
            case window.sudoku.target.SQUARE:
                row = squareCellToRowColumnMapper[t - 1][i][0];
                column = squareCellToRowColumnMapper[t - 1][i][1];
                break;
        }

        if (sudokuBoard[row - 1][column - 1] === number)
            n++;
    }

    return n;
};

window.sudoku.returnTwoDimensionalDataStructure = function(m, n) {
    var i, j, v = [];

    for (i = 0; i < m; i++)
        v.push([]);

    for (i = 0; i < m; i++)
        for (j = 0; j < n; j++)
            v[i].push(0);

    return v;
};

window.sudoku.returnThreeDimensionalDataStructure = function(l, m, n) {
    var i, j, k, v = [];

    for (i = 0; i < l; i++)
        v.push([]);

    for (i = 0; i < l; i++)
        for (j = 0; j < m; j++)
            v[i].push([]);

    for (i = 0; i < l; i++)
        for (j = 0; j < m; j++)
            for (k = 0; k < n; k++)
                v[i][j].push(0);

    return v;
};

window.sudoku.returnSquareCellToRowColumnMapper = function() {
    var v, index, i, row, column, square;

    v = window.sudoku.returnThreeDimensionalDataStructure(9, 9, 2);

    index = [0, 0, 0, 0, 0, 0, 0, 0, 0];

    for (row = 1; row <= 9; row++) {
        for (column = 1; column <= 9; column++) {
            square = 1 + (3 * Math.trunc((row - 1) / 3)) + Math.trunc((column - 1) / 3);
            v[square - 1][index[square - 1]][0] = row;
            v[square - 1][index[square - 1]][1] = column;
            index[square - 1]++;
        }
    }

    return v;
};

window.sudoku.returnSudokuBoardAsString = function(sudokuBoard) {
    var row, column, sb = "";

    for (row = 1; row <= 9; row++) {
        if (row > 1)
            sb += "\r\n";

        for (column = 1; column <= 9; column++) {
            if (column === 1)
                sb += sudokuBoard[row - 1][column - 1];
            else
                sb += (" " + sudokuBoard[row - 1][column - 1]);
        }
    }

    return sb;
};

window.sudoku.returnIntegerRandomNumber = function (minIncluded, maxExcluded) {
    var n = minIncluded + Math.round(Math.random() * (maxExcluded - minIncluded));

    if (n === maxExcluded)
        n = minIncluded;

    return n;
};

window.sudoku.simulateOneNumber = function(candidates, cellsRemainToSet, indexNumber) {
    var v = [], tmp, row, column, i, numberOfCandidates, minNumberOfCandidates = 9;

    for (i = 0; i < cellsRemainToSet.length; i++) {
        row = cellsRemainToSet[i][0];
        column = cellsRemainToSet[i][1];
        numberOfCandidates = candidates[row - 1][column - 1][0];

        if (numberOfCandidates > 0 && numberOfCandidates < minNumberOfCandidates)
            minNumberOfCandidates = numberOfCandidates;
    }

    for (i = 0; i < cellsRemainToSet.length; i++) {
        row = cellsRemainToSet[i][0];
        column = cellsRemainToSet[i][1];

        if (candidates[row - 1][column - 1][0] === minNumberOfCandidates)
            v.push(i);
    }

    tmp = window.sudoku.returnIntegerRandomNumber(0, v.length);
    indexNumber[0] = v[tmp];
    row = cellsRemainToSet[indexNumber[0]][0];
    column = cellsRemainToSet[indexNumber[0]][1];
    indexNumber[1] = candidates[row - 1][column - 1][1 + window.sudoku.returnIntegerRandomNumber(0, minNumberOfCandidates)];
};

window.sudoku.checkIfCanUpdateBestSoFarSudokuBoard = function(numberOfCellsSetInBestSoFar, cellsRemainToSet, workingSudokuBoard, bestSoFarSudokuBoard) {
    var retVal = numberOfCellsSetInBestSoFar; //Default

    if (numberOfCellsSetInBestSoFar < (81 - cellsRemainToSet.Count)) {
        retVal = 81 - cellsRemainToSet.Count;
        window.sudoku.copySudokuBoard(workingSudokuBoard, bestSoFarSudokuBoard);
    }

    return retVal;
};

window.sudoku.initCandidates = function(sudokuBoard, squareCellToRowColumnMapper, candidates) {
    var row, column, square, number, numberOfCandidates = 0, n;

    for (row = 1; row <= 9; row++) {
        for (column = 1; column <= 9; column++) {
            square = 1 + (3 * Math.trunc((row - 1) / 3)) + Math.trunc((column - 1) / 3);

            if (sudokuBoard[row - 1][column - 1] !== 0) {
                candidates[row - 1][column - 1][0] = -1; //Indicates that the cell is set already
            }
            else {
                n = 0;
                candidates[row - 1][column - 1][0] = 0; //Number of candidates is set in index 0

                for (number = 1; number <= 9; number++) {
                    if (
                        (window.sudoku.returnNumberOfOccurenciesOfNumber(sudokuBoard, squareCellToRowColumnMapper, number, row, "row") === 0) &&
                        (window.sudoku.returnNumberOfOccurenciesOfNumber(sudokuBoard, squareCellToRowColumnMapper, number, column, "column") === 0) &&
                        (window.sudoku.returnNumberOfOccurenciesOfNumber(sudokuBoard, squareCellToRowColumnMapper, number, square, "square") === 0)
                    ) {
                        n++;
                        candidates[row - 1][column - 1][0] = n;
                        candidates[row - 1][column - 1][n] = number;
                        numberOfCandidates++;
                    }
                }
            }
        }
    }

    return numberOfCandidates;
};

window.sudoku.tryFindNumberToSetInCellWithCertainty = function(row, column, candidates, squareCellToRowColumnMapper) {
    var i, square, numberOfCandidatesInCell, candidate, number = 0;

    square = 1 + (3 * Math.trunc((row - 1) / 3)) + Math.trunc((column - 1) / 3);
    numberOfCandidatesInCell = candidates[row - 1][column - 1][0];

    if (numberOfCandidatesInCell == 1)
        number = candidates[row - 1][column - 1][1];
    else {
        i = 1;
        while (i <= numberOfCandidatesInCell && number === 0) {
            candidate = candidates[row - 1][column - 1][i];

            if (window.sudoku.candidateIsAlonePossible(candidate, candidates, squareCellToRowColumnMapper, row, "row") ||
                window.sudoku.candidateIsAlonePossible(candidate, candidates, squareCellToRowColumnMapper, column, "column") ||
                window.sudoku.candidateIsAlonePossible(candidate, candidates, squareCellToRowColumnMapper, square, "square"))
                number = candidate;
            else
                i++;
        }
    }

    return number;
};

window.sudoku.updateCandidates = function(candidates, squareCellToRowColumnMapper, row, column, number) {
    var i, r, c, square, totalNumberOfCandidatesRemoved;

    totalNumberOfCandidatesRemoved = candidates[row - 1][column - 1][0]; //Remove all candidates in that cell
    candidates[row - 1][column - 1][0] = -1; //Indicates that the cell is set already

    square = 1 + (3 * Math.trunc((row - 1) / 3)) + Math.trunc((column - 1) / 3);

    for (c = 1; c <= 9; c++) {
        if (c !== column && candidates[row - 1][c - 1][0] > 0) {
            totalNumberOfCandidatesRemoved += window.sudoku.removeNumberIfItExists(candidates[row - 1][c - 1], number);
        }
    }

    for (r = 1; r <= 9; r++) {
        if (r !== row && candidates[r - 1][column - 1][0] > 0) {
            totalNumberOfCandidatesRemoved += window.sudoku.removeNumberIfItExists(candidates[r - 1][column - 1], number);
        }
    }

    for (i = 0; i < 9; i++) {
        r = squareCellToRowColumnMapper[square - 1][i][0];
        c = squareCellToRowColumnMapper[square - 1][i][1];

        if (r !== row && c !== column && candidates[r - 1][c - 1][0] > 0) {
            totalNumberOfCandidatesRemoved += window.sudoku.removeNumberIfItExists(candidates[r - 1][c - 1], number);
        }
    }

    return totalNumberOfCandidatesRemoved;
};

window.sudoku.validateSudokuBoard = function(sudokuBoard, squareCellToRowColumnMapper) {
    var row, column, square, number;

    for (row = 1; row <= 9; row++) {
        for (column = 1; column <= 9; column++) {
            square = 1 + (3 * Math.trunc((row - 1) / 3)) + Math.trunc((column - 1) / 3);
            number = sudokuBoard[row - 1][column - 1];

            if (number !== 0) {
                if (window.sudoku.returnNumberOfOccurenciesOfNumber(sudokuBoard, squareCellToRowColumnMapper, number, row, "row") > 1) {
                    return "The input sudoku is incorrect! The number " + number + " occurs more than once in row " + row;
                }
                else if (window.sudoku.returnNumberOfOccurenciesOfNumber(sudokuBoard, squareCellToRowColumnMapper, number, column, "column") > 1) {
                    return "The input sudoku is incorrect! The number " + number + " occurs more than once in column " + column;
                }
                else if (window.sudoku.returnNumberOfOccurenciesOfNumber(sudokuBoard, squareCellToRowColumnMapper, number, square, "square") > 1) {
                    return "The input sudoku is incorrect! The number " + number + " occurs more than once in square " + square;
                }
            }
        }
    }

    return null;
};

window.sudoku.processResult = function (sudokuBoardFinalResult) {
    var row, column, element;

    $("input[data-startinteger='1']").addClass("startInteger");

    for (row = 1; row <= 9; row++) {
        for (column = 1; column <= 9; column++) {
            element = $("#cell" + row.toString() + column.toString());
            if (sudokuBoardFinalResult[row - 1][column - 1] !== 0 && !element.hasClass("startInteger"))
                element.val(sudokuBoardFinalResult[row - 1][column - 1].toString());
        }
    }

    $("#divSudokuSolver input[type='text']").prop("readonly", true);
    $("#solveButton").prop("disabled", true);
    $("#solveButton").addClass("greyFontColor");
    $("#newSudokuButton").prop("disabled", false);
    $("#newSudokuButton").removeClass("greyFontColor");
};

window.sudoku.returnResult = function(sudokuSolved, numberOfCellsSetInInputSudokuBoard, numberOfCellsSetInBestSoFar, workingSudokuBoard, bestSoFarSudokuBoard) {
    var msg, tmp1, tmp2;

    if (sudokuSolved) {
        tmp1 = 81 - numberOfCellsSetInInputSudokuBoard;
        msg = "The sudoku was solved. " + tmp1 + " number(s) added to the original " + numberOfCellsSetInInputSudokuBoard + ".";
    }
    else {
        tmp1 = numberOfCellsSetInBestSoFar - numberOfCellsSetInInputSudokuBoard;
        tmp2 = 81 - numberOfCellsSetInBestSoFar;
        msg = "The sudoku was partially solved. " + tmp1 + " number(s) added to the original " + numberOfCellsSetInInputSudokuBoard + ". Unable to set " + tmp2 + " number(s).";
    }

    if (sudokuSolved || bestSoFarSudokuBoard === null) {
        window.sudoku.processResult(workingSudokuBoard);
    }
    else {
        window.sudoku.processResult(bestSoFarSudokuBoard);
    }

    return msg;
};

window.sudoku.makeSudokuBoard = function () {
    var element, r, c, oc, or, l, t, str1, str2, sudokuSquareWidth = 42, offset = 5;

    element = $("#divSudokuSolver");

    for (r = 1; r <= 9; r++) {
        for (c = 1; c <= 9; c++) {
            if (c < 4) {
                oc = 0;
            }
            else if (c >= 4 && c < 7) {
                oc = offset;
            }
            else {
                oc = 2 * offset;
            }

            if (r < 4) {
                or = 0;
            }
            else if (r >= 4 && r < 7) {
                or = offset;
            }
            else {
                or = 2 * offset;
            }

            l = sudokuSquareWidth * (c - 1) + 120 + oc;
            t = sudokuSquareWidth * (r - 1) + 170 + or;
            str1 = l.toString();
            str2 = t.toString();
            str3 = "<input type='text' id='cell" + r.toString() + c.toString() + "' class='sudokuCells' style='left: " + str1 + "px; top: " + str2 + "px;' />";
            element.append(str3);
        }
    }
};

window.sudoku.readInputIntegers = function () {
    var r, c, n, str, element, inputSudokuBoard, errorMessage;

    errorMessage = null;
    inputSudokuBoard = "";
    r = 1;

    while (r <= 9 && !errorMessage) {
        c = 1;
        while (c <= 9 && !errorMessage) {
            element = $("#cell" + r.toString() + c.toString());
            str = element.val().trim();

            if (str === "") {
                if (r < 9 || c < 9) {
                    if (c === 9)
                        inputSudokuBoard += "0\r\n";
                    else
                        inputSudokuBoard += "0 ";
                }
                else {
                    inputSudokuBoard += "0";
                }
            }             
            else if (window.isNaN(str))
                errorMessage = "The value given in row " + r.toString() + " and column " + c.toString() + " is not an integer!";
            else {
                n = window.parseFloat(str);

                if (n < 1 || n > 9 || Math.ceil(n) !== n)
                    errorMessage = "The value given in row " + r.toString() + " and column " + c.toString() + " is not an integer between 1 and 9!";
                else {
                    element.attr("data-startinteger", "1");

                    if (r < 9 || c < 9) {
                        if (c === 9)
                            inputSudokuBoard += "0\r\n";
                        else
                            inputSudokuBoard += (str + " ");
                    }
                    else {
                        inputSudokuBoard += str;
                    }
                }
            }
            c++;
        }
        r++;
    }

    return { errorMsg: errorMessage, inputSudokuBrd: inputSudokuBoard };
};

window.sudoku.newSudoku = function () {
    $("input[data-startinteger='1']").removeClass("startInteger");
    $("input[data-startinteger='1']").removeAttr("data-startinteger");
    $("#divSudokuSolver input[type='text']").prop("readonly", false);
    $("#divSudokuSolver input[type='text']").val("");
    $("#solveButton").prop("disabled", false);
    $("#solveButton").removeClass("greyFontColor");
    $("#newSudokuButton").prop("disabled", true);
    $("#newSudokuButton").addClass("greyFontColor");
};

window.sudoku.solveSudoku = function () {
    var obj, result;

    $("input[data-startinteger='1']").removeAttr("data-startinteger");

    obj = window.sudoku.readInputIntegers();

    if (obj.errorMsg) {
        alert(obj.errorMsg);
    }
    else {
        result = window.sudoku.run(obj.inputSudokuBrd);
        alert(result);
    }
};
