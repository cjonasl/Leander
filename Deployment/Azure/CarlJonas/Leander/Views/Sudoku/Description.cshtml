<!DOCTYPE html>

<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta charset="utf-8" />
  <title>Description of Carl Jonas's sudoku algorithm</title>
  <style>
    h1, h3 {
      font-family: Arial;
    }

    h4 {
      position: relative;
      top: 10px;
    }

    p {
      font-family: 'Times New Roman';
    }

    #outcomeTable {
      font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
      border-collapse: collapse;
      width: 100%;
    }

      #outcomeTable td, #outcomeTable th {
        border: 1px solid #ddd;
        padding: 8px;
      }

      #outcomeTable tr:nth-child(even) {
        background-color: #f2f2f2;
      }

      #outcomeTable th {
        padding-top: 12px;
        padding-bottom: 12px;
        text-align: left;
        background-color: #4CAF50;
        color: white;
      }

    #candidateTable {
      font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
      border-collapse: collapse;
    }

      #candidateTable td, #candidateTable th {
        border: 1px solid black;
        padding: 8px;
      }
  </style>
</head>
<body style="margin-top: 5px; margin-left: 25px;">
  <h1>Description of Carl Jonas's sudoku algorithm</h1>
  <h3>1. Definitions and terminology</h3>
  <p>I describe what definitions and terminology I have used in the algorithm.</p>
  <h4 style="margin-bottom: 0px;">1.1 Sudoku board</h4>
  <p>
    A <i>sudoku board</i> consists of:
    <ul>
      <li>9 rows</li>
      <li>9 columns</li>
      <li>9 squares</li>
      <li>81 cells</li>
    </ul>
  </p>
  <h3 style="margin-bottom: 0px; margin-top: 25px;">Sudoku board:</h3>
  <img src="https://leander20190225060235.azurewebsites.net/Images/SudokuBoard.png" />
  <h4>1.2 Some observations</h4>
  <ul style="line-height: 30px;">
    <li style="line-height: normal;">
      Each cell in the sudoku board is uniquely determined by its row and column, i.e. a &quot;two-tuple&quot;<br />
      (row, column). For example (3, 4) represents the cell in row 3 and column 4.
    </li>
    <li>Each row, column and square contains exactly 9 cells.</li>
    <li>Each cell belongs to exactly one row, one column and one square.</li>
  </ul>
  <h4>1.3 Valid contents in a cell</h4>
  <p>
    Each cell in the sudoku board may be empty, or contain one integer<br />
    in the set {1, 2, 3, 4, 5, 6, 7, 8, 9}.
  </p>
  <h4 style="margin-bottom: 2px;">1.4 Sudoku rule</h4>
  <p>
    Each row, column and square in the sudoku board must contain at most<br />
    one integer n for each integer 1, 2,...,9.
  </p>
  <h4>1.5 Valid sudoku board</h4>
  <p>
    A sudoku board is <i>valid</i> if <i>sudoku rule</i> is fulfilled.
  </p>
  <img src="https://leander20190225060235.azurewebsites.net/Images/ValidSudokuBoard.png" style="position: relative; left: -3px;" />
  <img src="https://leander20190225060235.azurewebsites.net/Images/NonValidSudokuBoard.png" style="position: relative; top: 9px;" /><br />
  <h4>1.6 Complete or solved sudoku board</h4>
  <p>
    In a complete or solved sudoku board there is <i>exactly one</i> integer n<br />
    in each row, column and square for n = 1, 2,...,9. This also implies<br />that all
    81 cells in the sudoku board are filled with an integer.
  </p>
  <img src="https://leander20190225060235.azurewebsites.net/Images/CompleteSudokuBoard.png" style="position: relative; left: -3px;" />
  <h4>1.7 The aim of the algorithm</h4>
  <p>
    The user is suppose to enter some start integers in the sudoku board
    such that <br /> it is still valid (the user may also choose to not enter any integers)
    The aim of <br /> the algorithm is then to add integers to the board,
    preferable fill all remaining <br /> empty cells and make it complete, such
    that the board still is valid.
  </p>
  <h4 style="margin-bottom: 25px;">1.8 The outcome of the algorithm</h4>
  <table id="outcomeTable">
    <thead>
      <tr>
        <th>Outcome</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Only an error message in an alert box</td>
        <td>The user has entered incorrect start data in the sudoku board</td>
      </tr>
      <tr>
        <td>Message: &quot;The sudoku is solved already.&quot; in an alert box</td>
        <td>The user has entered numbers 1-9 in all cells and the sudoku board is valid</td>
      </tr>
      <tr>
        <td>Message: &quot;Not possible to add any number to the sudoku.&quot; in an alert box</td>
        <td>The algorithm is unable to add any integer to the sudoku board</td>
      </tr>
      <tr>
        <td>
          Message: &quot;Sudoku partially solved. Numbers added = ??.&quot; in an alert box. The added numbers
          are placed in the sudoku board in black color and the color of the start integers are changed from black
          to mediumvioletred.
        </td>
        <td>The algorithm was able to add some integers to the sudoku board, but not to all cells.</td>
      </tr>
      <tr>
        <td>
          Message: &quot;Sudoku solved. Numbers added = ??.&quot; in an alert box. The added numbers
          are placed in the sudoku board in black color and the color of the start integers are changed from black
          to mediumvioletred.
        </td>
        <td>The algorithm was able to solve the sudoku, i.e. make it complete</td>
      </tr>
    </tbody>
  </table>

  <h3 style="margin-top: 30px;">2. The algorithm</h3>
  <p>I describe structures and algorithms used.</p>
  <h4>2.1 Sudoku board</h4>
  <p>
    The <i>sudoku board</i> is represented by a 9x9 structure of int in C#: <span style="font-family: 'Courier New'; font-weight: bold; font-size: small;">int[][] sudokuBoard;</span>
    <br />or in JavaScript an array of arrays: <span style="font-family: 'Courier New'; font-weight: bold; font-size: small;">var number = sudokuBoard[row - 1][column - 1];</span>
    <br />(Remember that index starts at 0 in the structure, so need to take &quot;row - 1&quot; and &quot;column - 1&quot;<br />
    for a cell in <span style="font-family: 'Courier New'; font-weight: bold; font-size: small;">(row, column)</span>).
  </p>
  <h4>2.1.1 A cell is set</h4>
  <p>
    When a cell in <span style="font-family: 'Courier New'; font-weight: bold; font-size: small;">(row, column)</span> is <i>set</i> then <span style="font-family: 'Courier New'; font-weight: bold; font-size: small;">sudokuBoard[row - 1][column - 1]</span>
    represents <br />one integer in {1, 2, 3, 4, 5, 6, 7, 8, 9}.
  </p>
  <h4>2.1.2 A cell is <i>not</i> set</h4>
  <p>
    When a cell in <span style="font-family: 'Courier New'; font-weight: bold; font-size: small;">(row, column)</span>  is <i>not set</i>, i.e. empty, then <span style="font-family: 'Courier New'; font-weight: bold; font-size: small;">sudokuBoard[row - 1][column - 1]</span> is 0.
  </p>
  <h4>2.2 Candidate</h4>
  <p>
    A <i>candidate</i> to a <i>not</i> set cell is a number in {1, 2, 3, 4, 5, 6, 7, 8, 9} that may be placed in the cell<br /> <i>without violate sudoku rule</i>.
    There might be more than one candidate for a not set cell.
  </p>
  <img src="https://leander20190225060235.azurewebsites.net/Images/CandidatesForSomeCells.png" style="position: relative; left: -22px; top: -5px;" />
  <h4>2.2.1 Total number of candidates</h4>
  <p>
    The algorithm keeps track of total number of candidates, i.e. the sum of all candidates
    in all  <br /> not set cells in a global variable. As long as total number of candidades are
    more than 0 the <br /> algorithm can continue. When the algorithm terminates total number of candidades
    are always 0.
  </p>
  <h4>2.2.2 Candidate structure</h4>
  <p>
    The <i>candidates</i> are represented by a 9x9x10 structure. The first two indexes are row and column<br />
    and third index is for the candidates. Position 0 in third index is for number of candidates and after<br />
    that the actual candidates. There are a maximum of 9 candidates for each non set cell so that is why<br />
    the length is 10 (one position for number of candidates and then positions for up to 9 candidates).<br />
    For example row 5 and column 8 above, the algorithm keep the following in the candidate structure:
  </p>
  <ul style="font-family: 'Courier New'; font-size: medium;">
    <li>candidates[4][7][0]<span style="font-family: 'Times New Roman'"> is 4, i.e. number of candidates for the cell</span></li>
    <li>candidates[4][7][1]<span style="font-family: 'Times New Roman'"> is 1</span></li>
    <li>candidates[4][7][2]<span style="font-family: 'Times New Roman'"> is 5</span></li>
    <li>candidates[4][7][3]<span style="font-family: 'Times New Roman'"> is 6</span></li>
    <li>candidates[4][7][4]<span style="font-family: 'Times New Roman'"> is 8</span></li>
  </ul>
  <h4>2.2.3 Help functions</h4>
  <p>
    To be able to calculate the candidate structure the algorithm uses the following
    simple help functions:
  </p>
  <ul style="font-family: 'Courier New'; font-size: medium;">
    <li>returnSquare(row, column) --> square</li>
    <li>returnNumberOfOccurenciesOfNumberInRow(sudokuBoard, row, number) --> n</li>
    <li>returnNumberOfOccurenciesOfNumberInColumn(sudokuBoard, column, number) --> n</li>
    <li>returnNumberOfOccurenciesOfNumberInSquare(sudokuBoard, square, number) --> n</li>
  </ul>
  <img src="https://leander20190225060235.azurewebsites.net/Images/ReturnSquare.png" style="position: relative; left: -2px; top: 10px;" /><br /><br /><br />
  <img src="https://leander20190225060235.azurewebsites.net/Images/returnNumberOfOccurenciesOfNumberInSquare.png" style="position: relative; left: -2px; top: 10px;" />
  <h4>2.2.4 Calculation of candidate structure</h4>
  <p>
    With the 4 help functions in section 2.2.3 it is a straightforward task to calculate the<br />
    candidate structure. A number is a candidate if the 3 &quot;returnNumber&quot; functions all<br />
    return 0. The candidate structure is important. The algorithm makes decisions how<br />
    to proceed based on that structure together with sudokuBoard structure.
  </p>
  <img src="https://leander20190225060235.azurewebsites.net/Images/CalculationOfCandidateStructureInJavaScript.png" style="position: relative; left: -5px; top: 5px;" />
  <h4>2.3 List with cells that remain to be set</h4>
  <p>
    The algorithm gets first a list with cells, i.e. a list with two-tuples of integers representing row and<br />
    column in the sudoku board, that remain to be set. These cells are then processed one at a time to<br />
    decide if the cell can be set (based on current structure of sudokuBoard and candidates). If the cell<br />
    can be set then the cell is set and structure of sudokuBoard and candidates are updated and the <br />
    algorithm goes back to first cell in the list (if it was not possible to set first cell in the list this might<br />
    be the case after update of structure so that is why the algorithm always go back to first cell in list<br />
    after a new cell has been set). I am now ready to present a first version of Carl Jonas's sudoku<br />
    algorithm on a upper level. Here is the source code in JavaScript:
  </p>
  <img src="https://leander20190225060235.azurewebsites.net/Images/SudokuAlgorithmFirstVersion.png" />
  <h4>2.4 To decide if a cell can be set</h4>
  <p>
    In this section I describe how the algorithm decides if a cell can be set, i.e. an implementation of<br />
    the function <i>canSetCell</i>. The idea is to look at the cell's candidates. It is a condition on a candidate<br />
    that needs to be true. There are 4 conditions and at least one of them needs to be true for at least<br />
    one of the candidates. The 4 conditions are of which the 3 last are similar idea:
    <ul>
      <li>Alone candidate in cell</li>
      <li>Alone candidate possible in row</li>
      <li>Alone candidate possible in column</li>
      <li>Alone candidate possible in square</li>
    </ul>
  </p>
  <h4>2.4.1 Alone candidate in cell</h4>
  <p>If there is only one candidate for a cell then that candidate must be in cell. There is no other option.</p>
  <img src="https://leander20190225060235.azurewebsites.net/Images/AloneCandidateInCell.png" style="position: relative; left: -3px; top: 8px;" />
  <h4>2.4.2 Alone candidate possible in row</h4>
  <p>
    If a cell has a candidate and there is no other cell in the row with this candidate number<br />
    then the algorithm can conclude that this candidate must be in cell.
  </p>
  <img src="https://leander20190225060235.azurewebsites.net/Images/AloneCandidatePossibleInRow.png" style="position: relative; left: -3px; top: 8px;" />
  <h4>2.4.3 Alone candidate possible in column</h4>
  <p>
    Alone candidate possible in column is similar to row-version except that it is with respect<br />
    to a column instead of a row.
  </p>
  <img src="https://leander20190225060235.azurewebsites.net/Images/AloneCandidatePossibleInColumn.png" style="position: relative; left: -3px; top: 8px;" />
  <h4>2.4.4 Alone candidate possible in column</h4>
  <p>
    Alone candidate possible in square is similar to row- and column-version except that it is with<br />
    respect to a square instead of a row or column.
  </p>
  <img src="https://leander20190225060235.azurewebsites.net/Images/AloneCandidatePossibleInSquare.png" style="position: relative; left: -3px; top: 8px;" />
  <h4>2.4.5 Implementation of function <i>CanSetCell</i></h4>
  <p>
    3 help functions, <i>NumberIsAloneCandidateInRow</i>, <i>NumberIsAloneCandidateInColumn</i> and <br />
    <i>NumberIsAloneCandidateInSquare</i>, are introduced to decide if a given candidate is alone in<br />
    row, column and square. It is then straightforward to implement <i>CanSetCell</i> and here is the<br />
    implementation in C#:
  </p>
  <img src="https://leander20190225060235.azurewebsites.net/Images/CanSetCell.png" style="position: relative; left: -3px; top: 2px;" />
  <h4>2.5 Update structure</h4>
  <p>
    When a new number is placed in a cell in the sudoku board afterwards <i>sudokuBoard</i>, <i>candidates</i><br />
    and <i>cellsRemainToBeSet</i> need to be updated.
  </p>
  <h4>2.5.1 Update <i>sudokuBoard</i></h4>
  <p>If a new number <i>n</i> is placed in cell [<i>r</i>, <i>c</i>] then</p>
  <ul>
    <li><span style="font-family: 'Courier New'">sudokuBoard[r - 1, c - 1] = 0</span>&nbsp;&nbsp;before update</li>
    <li><span style="font-family: 'Courier New'">sudokuBoard[r - 1, c - 1] = n</span>&nbsp;&nbsp;after update</li>
  </ul>
  <h4>2.5.2 Update <i>candidates</i></h4>
  <p>
    If a new number <i>n</i> is placed in row = <i>r</i>, column = <i>c</i> and square = <i>s</i>, then number <i>n</i><br />
    is removed as a candidate in all cells in row = <i>r</i>, all cells in column = <i>c</i> and all cells<br />
    in square = <i>s</i>.
  </p>
  <img src="https://leander20190225060235.azurewebsites.net/Images/UpdateCandidateStructure.png" style="position: relative; left: -4px; top: 2px;" />
  <p>
    In the above sudoku board it is possible to set number 8 in row 1 and column 2 since 8 is<br />
    alone possible in cell. You need to look at candidate structure for a possible update (if cell<br />
    contains candidate number 8) in all cells in row 1, column 2 and square 1 that are not already<br />
    set, plus also the cell that is set (set it to -1 to indicate that the cell is set):
  </p>
  <table id="candidateTable">
    <thead>
      <tr>
        <th>Row</th>
        <th>Column</th>
        <th>Candidates before</th>
        <th>Candidates after</th>
        <th>Note</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>1</td>
        <td>1</td>
        <td>2, 6, 8</td>
        <td>2, 6</td>
        <td>8 removed</td>
      </tr>
      <tr>
        <td>1</td>
        <td>2</td>
        <td>8</td>
        <td>candidates[0, 1, 0] = -1</td>
        <td>The cell that was set</td>
      </tr>
      <tr>
        <td>1</td>
        <td>5</td>
        <td>2, 8, 9</td>
        <td>2, 9</td>
        <td>8 removed</td>
      </tr>
      <tr>
        <td>1</td>
        <td>6</td>
        <td>4, 6</td>
        <td>4, 6</td>
        <td>No change</td>
      </tr>
      <tr>
        <td>1</td>
        <td>7</td>
        <td>2, 4, 7, 8</td>
        <td>2, 4, 7</td>
        <td>8 removed</td>
      </tr>
      <tr>
        <td>1</td>
        <td>9</td>
        <td>4, 6, 7, 8, 9</td>
        <td>4, 6, 7, 9</td>
        <td>8 removed</td>
      </tr>
      <tr>
        <td>2</td>
        <td>1</td>
        <td>2, 6, 8</td>
        <td>2, 6</td>
        <td>8 removed</td>
      </tr>
      <tr>
        <td>4</td>
        <td>1</td>
        <td>4, 7, 8, 9</td>
        <td>4, 7, 9</td>
        <td>8 removed</td>
      </tr>
      <tr>
        <td>5</td>
        <td>1</td>
        <td>3, 7, 8, 9</td>
        <td>3, 7, 9</td>
        <td>8 removed</td>
      </tr>
      <tr>
        <td>7</td>
        <td>1</td>
        <td>2, 3, 7, 8, 9</td>
        <td>2, 3, 7, 9</td>
        <td>8 removed</td>
      </tr>
      <tr>
        <td>8</td>
        <td>1</td>
        <td>2, 3, 7</td>
        <td>2, 3, 7</td>
        <td>No change</td>
      </tr>
      <tr>
        <td>9</td>
        <td>1</td>
        <td>2, 3, 4, 7, 8</td>
        <td>2, 3, 4, 7</td>
        <td>8 removed</td>
      </tr>
      <tr>
        <td>3</td>
        <td>3</td>
        <td>2, 5, 8</td>
        <td>2, 5</td>
        <td>8 removed</td>
      </tr>
    </tbody>
  </table>
  <h4>2.5.3 Update <i>cellsRemainToBeSet</i></h4>
  <p>The cell that was set is simply removed from the list <i>cellsRemainToBeSet</i>.</p>
  <h4>2.6 Simulation</h4>
  <p>
    The algorithm presented in section 2.3 solves easy and medium levels sudokus, but
    not the harder ones.<br />For harder sudokus you will come to a point where the
    algorithm has gone through all cells in the list<br /> <i>cellsRemainToBeSet</i> but it
    was not possible to set any number with the conditions in section 2.4. An<br />
    error will then happen in first line after the while clause (see below)
    since the index is then equal to<br /> cellsRemainToBeSet.length, which is outside
    the allowable range [0, cellsRemainToBeSet.length-1]:
  </p>
  <img src="https://leander20190225060235.azurewebsites.net/Images/NeedToSimulate.png" style="position: relative; left: 1px; top: 7px;" />
  <div style="position: relative; top: 15px;">
    <p>
      The algorithm solves the error by introducing a check whether index=cellsRemainToBeSet.length and
      if so<br />randomly select one cell among the cells that have <i>minimum</i> number of candidates, and then
      in this cell<br />randomly select one of the candidates. It is a 4 step process:
    </p>
    <ul>
      <li>Step 1: Go through all cells that remain to be set and decide min number of candidates</li>
      <li>Step 2: Put all cells that have min number of candidates in a list</li>
      <li>Step 3: Randomly select one cell in the list with cells that have min number of candidates</li>
      <li>Step 4: Randomly select one candidate in the cell that was randomly selected in step 3</li>
    </ul>
    <br />
    Implementation of the simulation in C#:
  </div>
  <img src="https://leander20190225060235.azurewebsites.net/Images/SimulateOneCandidate.png" style="position: relative; left: -1px; top: 35px;" /><br /><br /><br /><br />
  <p>Simulation added to the algorithm:</p>
  <img src="https://leander20190225060235.azurewebsites.net/Images/SudokuAlgorithmSecondVersion.png" style="position: relative; left: -1px; top: -2px;" />
  <h4>2.7 Last complexity</h4>
  <p>
    The last complexity in the algorithm is <i>repeated simulation</i> if needed. It turns out that if you are<br />
    lucky with the randomness of the selected candidates the algorithm can solve the sudoku, and if<br />
    not lucky the algorithm solves it only partially so you need to give the algorithm several attempts.<br />
    First add as many numbers as possible with <i>certainty</i>, i.e. with the 4 conditions in section 2.4, and<br />
    then from there let the algorithm simulate several times if needed (up to 10 times) to try to solve<br />
    the sudoku:
  </p>
  <img src="https://leander20190225060235.azurewebsites.net/Images/SimulationFlow1.png" style="position: relative; left: -4px; top: 2px;" /><br />
  <img src="https://leander20190225060235.azurewebsites.net/Images/SimulationFlow2.png" style="position: relative; left: 20px; top: -15px;" />
</body>

</html>